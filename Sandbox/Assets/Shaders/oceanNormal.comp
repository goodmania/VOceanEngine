#version 450

layout(std430, set = 0, binding = 0) buffer H0Buffer
{
	vec2 H0Buffers[ ];
};

layout(std430, set = 0, binding = 1) buffer HtBuffer 
{
	vec2 HtBuffers[ ];
};

layout(std430, set = 0, binding = 2) buffer Ht_dmyBuffer 
{
	vec2 Ht_dmyBuffers[ ];
};

layout (std140, set = 0, binding = 3) uniform UBO 
{
	float deltaT;
	float lambda;
	uint meshSize;
	highp uint OceanSizeLx;
	highp uint OceanSizeLz;
} ubo;

layout(binding = 4, rgba32f) uniform writeonly image2D OceanNormalImage;

layout(binding = 5, r32f) uniform writeonly image2D OceanBubbleImage;

layout (local_size_x = 256) in;

void main()
{
	float dx = 1.0f * ubo.OceanSizeLx / ubo.meshSize;
	float dz = 1.0f * ubo.OceanSizeLx / ubo.meshSize;

	uint N = ubo.meshSize;
	uint offset = N * N; // 0 ht_y, 1 ht_dx, 2 ht_dz, 3 dx 4 dz
    ivec2 id = ivec2(gl_GlobalInvocationID.xy);
    uint x0 = (id.x - 1 + N) % N;
    uint x1 = (id.x + 1) % N;
    uint y0 = (id.y - 1 + N) % N;
    uint y1 = (id.y + 1) % N;

	float dDxdx = 0.5 * (HtBuffers[x1 + id.y * N + 3 * offset].y - HtBuffers[x0 + id.y * N + 3 * offset].y);//中心差分
    float dDzdz = 0.5 * (HtBuffers[id.x + y1 * N + 4 * offset].y - HtBuffers[id.x + y0 * N + 4 * offset].y);//中心差分
    float dDxdz = 0.5 * (HtBuffers[id.x + y1 * N + 3 * offset].y - HtBuffers[id.x + y0 * N + 3 * offset].y);//中心差分
    float dDzdx = 0.5 * (HtBuffers[x1 + id.y * N + 4 * offset].y - HtBuffers[x0 + id.y * N + 4 * offset].y);//中心差分

    float gradx = HtBuffers[id.x + id.y * N + 1 * offset].y;
    float gradz = HtBuffers[id.x + id.y * N + 2 * offset].y;

    //displaceXZだけ定義点が移動することを考えここで傾きをさらにいじる
    gradx *= dx / (dDxdx * ubo.lambda + dx);
    gradz *= dz / (dDzdz * ubo.lambda + dz);
   
	vec3 Normarized = normalize(vec3(-gradx, 1.0f, -gradz));
    vec3 absNormarized = vec3(abs(Normarized.x), abs(Normarized.y), abs(Normarized.z));

    imageStore(OceanNormalImage, id, vec4(absNormarized, 1.0f));

	 //Jの計算
    float Jxx = 1.0 + dDxdx * ubo.lambda;
    float Jzz = 1.0 + dDzdz * ubo.lambda;
    float Jxz = dDxdz * ubo.lambda;
    float Jzx = dDzdx * ubo.lambda;

    float J = Jxx * Jzz - Jxz * Jzx; //J<0なら面が裏返しになってる

    imageStore(OceanBubbleImage, id, vec4(J));
}
