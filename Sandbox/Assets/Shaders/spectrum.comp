#version 450


layout(std430, set = 0, binding = 0) buffer H0Buffer
{
	vec2 H0Buffers[ ];
};

layout(std430, set = 0, binding = 1) buffer HtBuffer 
{
	vec2 Ht_Buffers[ ];
};

layout(std430, set = 0, binding = 2) buffer Ht_dmyBuffer 
{
	vec2 Ht_dmyBuffers[ ];
};

layout (std140, set = 0, binding = 3) uniform UBO 
{
	float deltaT;
	float lambda;
	uint meshSize;
	uint OceanSizeLx;
	uint OceanSizeLz;
} ubo;

layout (local_size_x = 256, local_size_y = 1) in;

vec2 conjugate(vec2 arg)
{
    vec2 f2;
    f2.x = arg.x;
    f2.y = -arg.y;
    return f2;
}

vec2 MultiplyComplex(vec2 a, vec2 b)
{
	return vec2(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x);
}

vec2 AddComplex(vec2 a, vec2 b)
{
	return vec2(a.x + b.x , a.y + b.y);
}

vec2 ComplexExp(float a)
{
    return vec2(cos(a), sin(a));
}

const float PI = 3.14159265358979323846264338327950288;

void main()
{
	uvec3 id = gl_GlobalInvocationID; 

	uint in_index = id.y * ubo.meshSize + id.x;
    uint in_mindex = (ubo.meshSize - id.y) % ubo.meshSize * ubo.meshSize + (ubo.meshSize - id.x) % ubo.meshSize; // mirrored
    uint out_index = id.y * ubo.meshSize + id.x;

	uint offset = ubo.meshSize * ubo.meshSize;
	int meshSize = int(ubo.meshSize);

	vec2 k;
	k.x = (-meshSize / 2.0f + id.x) * (2.0f * PI / ubo.OceanSizeLx);
	k.y = (-meshSize / 2.0f + id.y) * (2.0f * PI / ubo.OceanSizeLz);

	float k_len = sqrt(k.x * k.x + k.y * k.y);
    float w = sqrt(9.81f * k_len);

	vec2 h0_k  = H0Buffers[in_index];
	vec2 h0_mk = H0Buffers[in_mindex];

	vec2 htval = AddComplex(
			MultiplyComplex(h0_k, ComplexExp(w * ubo.deltaT)),				
			MultiplyComplex(conjugate(h0_mk), ComplexExp(-w * ubo.deltaT)));
	
	Ht_Buffers[out_index + 0 * offset] = htval;

	// ht_dx, ht_dz
	vec2 htival; // i*htval
	htival.x = -htval.y;
	htival.y = htval.x;
	Ht_Buffers[out_index + 1 * offset] = htival * k.x;
	Ht_Buffers[out_index + 2 * offset] = htival * k.y;

	if (k_len != 0.0) 
	{
		k.x /= k_len;
		k.y /= k_len;
	}
	
	Ht_Buffers[out_index + 3 * offset] = -htival * k.x;
	Ht_Buffers[out_index + 4 * offset] = -htival * k.y;
}
