#version 450

struct Ocean
{
	vec4 Pos;
	vec4 UV;
	vec4 Normal;
};

layout(std430, binding = 0) buffer H0In 
{
	Ocean OceanIn[ ];
};

layout(std430, binding = 1) buffer H0Out 
{
	Ocean OceanOut[ ];
};

layout (binding = 2) uniform UBO 
{
	float deltaT;
	uint meshSize;
} ubo;

layout (local_size_x = 10, local_size_y = 10) in;

// h(k,x)の計算に必要な関数を実装する。
vec2 MultiplyComplex(vec2 a, vec2 b)
{
	return vec2(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x);
}

vec2 AddComplex(vec2 a, vec2 b)
{
	return vec2(a.x + b.x , a.y + b.y);
}



void main()
{
	uvec3 id = gl_GlobalInvocationID; 

	uint index = id.y * ubo.meshSize + id.x;
	if(index > ubo.meshSize * ubo.meshSize)
		return;


}
